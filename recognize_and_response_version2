#So we actually can delete the duplicate function/mark and just insert the new fiture in the copy/paste mark because the duplicate actually can copy and paste several time 
#same thing but with dinamic argument and different functions that take different argument for example function1 can take all the part-block that we insert to the paste in order
#to discover more marks that consider internal mark in the copy (and in generly we actually called to mark and function that site on the mark that we catch internal marks and 
#functions )<- and that actually say that the default-mark that we read directly in the block and keep and check what we need in several beginning functions and keep in the 
#form how we need according the indtruction of the default-mark and after in the oop classes perform we actually analyze everything and perform what we need . So we actually do
#everything that consider spacial according the request in the interanl-function and internal-mark the default mark do actually very simple things such as copy and paste 
#short things... but the internal thing like the spacial arguments and the function that take the spacial argument that consider argument or argument that consider argument 
#because we put the function that read the charecter/s like arguments.


#that can say about the way that we go on we actually we recognize the "big-mark" the default mark and check
#it and keep in the form in spesific place and in the spesific way that mean actually we have condition category that we can put the mark and save different part of and after 
#we can perform all the things and first the instruction of the default mark and after the function argument and more according the request and the instruction and just insert
#the wanted things in the block or the part of the block that we catch or in the place that we modify and send as massege .

#after we know the process of every modify in the system and approximately how the client get it we understand that we need to put as well as the argument we want to modify
# in the place that we paste the catching-block or something like this we need to say which condition we will turn on this functionality about the block or add or do 
# some kind of modify on the argument according the condition like argumentId?(+=)!(+1) or argumentId?(function1) . So in this way we actually say before all the activates 
#about the argument that we want to do we can simply say the situation that we want to do this process about the spesific argument . 
#The math in order to find the tiwch  of {} in block -> i need this math in order to understand more clear where i need to put the varible or to do this action on the varible/
#object so we just need the index of the ({) and after the next (}) , but if in the same block found more ({) we need the next next (}) and etc... this code will be like this :

# when we insert something in the block or in the catch(the place that we "catch" with the open and close tag with the default-mark)
#with function according the value and condition or in other word every when we insert or modify argument we have several of mendedory that we must do in order to do it 
# pefect and in the currently argument/s :

# first we will use in the loop for in order to recognize the index of the { } that suit for together after we need to insert the argument or modify that we choise for 
#dinamic and we put them not in the sub-function i.e don't belong to the catch but this argument can be in catch-place simply don't blong to this place and don't need to insert
#or get modify with the default-mark that close about this place like (a) argument the default argument that insert in the beginnig
#So in shortly i said about we have tow type of argument that blong to catch and the regolary argument 
#and we will insert and modify the argument that ordinary in the beginning and the sub argument that blong to some kind of catch class in the same way 
#we will check the condition of the argument and the type of the argument (let's assume that in ORD argument he need to be in the extend(איקף) of the block)
# and active the instruction way , so if we need to be in the extend of the block we need i.e ORD argument we need every catch or place that we cheracter to create list of
# indexs for tiwch of { and this } and every time insert or modify or do something but the issue is to know the change of the lengh argument and after do :
# A(the number that we need to increase or decrease all the {} tiwch constitunet-list) = B(length_argument_rightNow_old) - C(length_argument_rightNow_old) 
#and after change all the number in this constitunet-list of index ^^^^^^^^^^^^^ why we need actually to know the limit of the block ? because if we insert the 
#argument and (most of the time that whene we will use in arguments we will do some insert or modify but in inserting way ) we need to suit the value to argument in the 
#wanted block due to we need to know the index of the { and the suit close } before we take care about the next argument/s and every time the index get change because we insert
#thing/s in different length .
#the placement will something simple like this:
"""
for twich in institunetTwichListOld:
    for index in twich :
        index+=A(The bonus number can be +/- netural)
        institunetTwichListNew.append(index)
    institunetTwichListNewOld.append(institunetTwichListNew) 
    institunetTwichListNew=[]
institunetTwichListOld=institunetTwichListNew
#^^^^^^^^that how to create chage and increase or decrease the { } in suit according what we add (above)
"""
"""

#And the area for this value or for this doing on the argument will be something like this (below)
for index in dictionaryPair.open:
  space=argumentIndex-dictionaryPair
  list.append(space)
find_positive_number(list):
  positiveList=[num for num in list if num > 0]
  if list:
    return positiveList
positiveList=find_positive_number(list)
minPositiveSpace=min(positiveList)
minPositiveSpaceIndex=dictionaryPair.open.index(minPositiveSpace)
areaArgument=[dictionaryPair.open[minPositiveSpaceIndex],dictionaryPair.close[minPositiveSpaceIndex]]
#this the is the area for the variable that we take as argument in the block .
"""
#The new idea about the system of the blockFunction that will bring more easier for the client and for the us (programers) :
#we will append to the data-block place for (marks) and instructions with spacial id for everyone of them .
#And in this way we actually can short the requests , instead of to write for example on some kind of catch place in the block instructions and spacial thing we actually 
#write it in spacial place in data-block and just say we want to use in this instructions according the id .
#For example of this situation that we can use in this fiture : <--(idCopyFunction){block}-->  idCopyFunction(fucntion1(argument1) function2(argument2))
#We will insert the argument/sub-function in different way in this case every time basically we will build handler in the instruction about the thing that we will bind to 
#the catch with id for example if we want to take care about argument in or other type of sub-function we will build may condition that ask for example if the argument
#equal to something and if yes we will insert the argument with the function1 or something like this , the porpuse is to put the wnated value or the wanted thing in the 
#exactly place according what exist before after what it equal and more mark that we decide according them, and response with our instructions .

#In this way everything will be very easy because we will response with the instruction and fit it to id , that true exist default thing that get perform and behave first in 
#one way , but we can combine this defualt behavior in some thing and our behavior with instruction and also with argument or some kind of sub-function 
#So this system will build like this : we will put several mark and we know that they have type of behavior that come on in default such as "copy" function at the other place
#we connect with id spacial instruction also behavior for ->(argument or sub-function , but also they have default behavior such as connect to the copy catch with our 
#id for it) the behavior that we put in the "argument or sub-function" is just based on the nameOf mark id... and we just search it in the catch , of course not everyone have
#"catch" place like : copy-function , So if nothing we just need to put this sub-function argument and bind it to the thing that we want with id , and after it we simply will
#search it in the catch of spesific thing , let's understand this topic with example :
# -->{(blockName(optional),idPasteFunction),function1(argument1='123
# (So now in this way we just can put in this function that in the currently mark as argument or simply insert the ending value to the argument with name 
# argument1 or if nothing argument in this function it take all the block copy or the catch and perform the function about it 
# in shortly we actually see that prefer to use in the instruction at the block-data to say what we exactly wnat and how)'))}<--
#So in this case if we want modify and perform things on the copy catching idPasteFunction(idargument?('Elior')!(function1(idargument),
# idargument?([3]->+=1)!(modify spesificArgument\numberCatch("the number or condition and the")[0][condition[0].index(1)] put 2))) 
#^^^^^^^^^^^^^^^^ In this case we saw actually how we create spesific condition for argument according id first after we put the wnated things according index and the condition
#that should anough flexabilty in this case(placement argument and sub-function according the conditions) .
#several fixes in this case that can get more relevant:
#We actually can aim to spesific place like (condition[0]) , so we can take this idea and create more flexability we can create "pain" and give the id and after we check 
#condition or something like this for argument or some thing we will can aim and change the "pain" and even aim exactly where we want to bring change in the relation or the 
#pain thing 
#that idea bring more flexability to the system because instead of aim where we want to change the thing according the nuber of condition that in the qestion or more over 
#we can for example change the argument or the guy that we want to "modify" and say we want this and this to modify because it uphold the condition (and) exist "pain" about this
# thing and more and more situation that we can simply do in really simple mark . 
#the condintion of the argument can be something like this :



#(argument.tag.id="tagId")
#1: (argument.id="argumentId")?([0]->+=^This before^1^This after^)~([1]<-1^tow^2^towAfter^)!(modify before in condition[0] "^This after^" after "^This before^" catch 1 equel 2
#,modify after ^tow^ before ^towAfter^ condition[1][condition[1].index(2)]=3,...)

#We need to follow about the variable/object/element and the place that for and decide if check and perform or not . 
#Despite we actually can't put any of the sub-function in the condition, because if we actually want want to put id of any sub-function and care about it we can simply create a
#new statment of conditions and performs . So instead in order to make flexability in our system and check condition in more dinamic way we can use in our attribute that we created
#the (^) with it we will can mark place for condition to start check from i.e we will create mark and from there we will start to search the spesific thing as well as we will
# add id/class... other things that we can catch and change and what ever like this for the same condition/s and afer in the preformer this will allow to catch what we want

# for example to the 2new ask : (argument.id="Aid",tag.id="tagId")?(argument itself(automaticaly)[80-120]<-"^Elior^"[1]<-+=1)!(modify in condition[0] [argument[0]+argument[1]]=123\all=123)
#let's break this down : we actually say in this case that we want to modify or something else to do in the !(...) , after we actually "range" from the catching thing 
#like this argument.id="Aid",tag.id="tagId" and put type of "if" exist in this range and behind the catching thing because (<-) and after we say the same thing on the 
#  "^Elior^"" if we found it in the range we will search behind one "-+=1" and if everything happned we change (all) the argument or sub-function that we catch to 123
# and in the deliberately we aim to condition 1 and use in (modify) method . 

#example 2:
#(argument.id=1,tag.id=2)?([0-20]->^simpleMark^[0]<-"Elior the king")~([0]->"Banda")~("Elior")!(in condition[0]  after "->" before "<-")  
                                                                    #^ "and" for our system^^ the argument or wanted thing it self is eqeul to "Elior"
   #What is going on with ^something^ : that actually our way to say "this the guy i want to modify/something else and the beautiful thing in this solution is ->(in our system
   # that read the block and etc... we delete the ^^ and everything that in , so we can use this "mark" in order to mark the spesific thing and after we modify the argument
   # or somthing else or do everything elese we delete it and that isn't disturbing )" and this how we "catch" the 1 from exact place.
   
   #the explantion  for example one is : in the beginning " (argument.id="argumentId")" we say that we want to see in this case at the block the argument with this spesific
   #id , after we create to condition by the way because of this we put in the activate place this !(...) condition[0] and condition[1] in the condition one we write
   #([0]->+=^This before^1^This after^) let's break down ([0]) that mean "we want to check the something direct after or behind the argument with this id " the (->) mean 
   #"I want to search it after this argument" and after is just the describe about what we actually want after "+=^This before^1^This after^" the "and" condition (by the way 
   # "~" say "and" in our system) "([1]<-1^tow^2^towAfter^)" ([1]) say we beginning to check the wanted thing not dirctly like the previous condition , one more char in order
   #and the (<-) say behind , 1^tow^23^towAfter^ say simply what we wnat in the condition (for clearly this the condition 12 simply the things with ^ for say the system 
   #we want something between both and contrast between more 23 if was in the same condition)
   #so after we just say what we want with really simple instructions (after the ! mark of course) : (modify before "^This after^" after "^This before^" catch 1 equel 2
#,modify after ^tow^ before ^towAfter^ condition[1][condition[1].index(2)]=3,...)


#In order to understand how to follow on "element" in order to understand where the tange of him or something like this we need to figre out actually how we can follow
#on any variable/object :
#So in the block the user can create variable/object when he eqeul something, (variable) (=) (value) . So the variable can get change in several way , but the (id) of him
#didn't get change i.e the details that we create about the variable/object -> (~id,...~) . Basically we create a variable and bring value so we need to follow about the 
# variable and object and update the value everytime that we exactly need the challenge in this case is , actually undestand the range of every variable but the majority 
# is to understand when we change the variable/object for really or the local variable/obgect . In our case we just need to undestand what is the range and check him for
# every time we see the same name of variable the range of the block that he contain in if nothing and the range is true we can change in our details the value if have 
# we need to check if have any instance in this range of the "mini" block that we in (global variableName) or if we speak on function in function (nonlocal variableName).

#So for this we need to create function that can find the range of index of something that we search we can actually do it with (loop for rand) and we will pull out every
#time one char or index from the "block" and check if this suit to first index of wanted things for example the wanted things can be somethings like this:
# A=["global variableName1","global variableName2","global variableName3","nonlocal variableName1","nonlocal variableName2"]<- this can be for example the wanted things in order
# to follow about the variable or object that we created or something like this . And the block or the part of block that we put in order to follow on the variable/object or 
# or (simply str that we put in order to search suit things to the "wnated" things the A list for example and as well as to get "rangeIndex" of the wanted things in the str
#i.e where wanted things in exact place)<- we do this function in order to find any wnated things according what we said but in majority for decide what we need to do with the 
#variable\object that we put about him "details"->(ut local variable\object , or notice what is the actually aim of . In shortly that are the intents of function .  
#str=[""]~id...~) if we need to change or not because sometime the variable not in the range of the block or this just the same name 
# but the intent(הכוונה) is actually change or p
import re
licenses_suspiciousVariableObject_forSpesificPlaceInBlock=["global variableName1","global variableName2","nonlocal object1"]
def range_index(block_part):
  for blockCharIndex in range(block_part):
    for license in licenses_suspiciousVariableObject_forSpesificPlaceInBlock:
      for licensesChar in license:
        if block_part[blockCharIndex]==licensesChar:
          boolian=True
          while(boolian):
            for wantedCharIndex in range(1,len(license)):
              if license[wantedCharIndex]==block_part[blockCharIndex+wantedCharIndex]:
                continue
              else:
                boolian=False
              if wantedCharIndex==len(license)-1 and re.search(r'\s',block_part[blockCharIndex+1]):
                print('Allow to change details on the same variable/object in this spisific block.')
                #So we achive type of license to change it in this spesific block and from here we just
                #need to find the range index of this name-variable/object and change the details according what we actually listen . 
                
                #That allow because we actually in wanted write the "licanse" for change this spesific suspicious(the variable/object suspicious for child block that his 
                # parent create this variable/object) variable/object when we catch in the child of license that suit for it for example: global variableName nonlocal variableName
                # or more licenses that can apeare. the licenses contain here and we can check with this loops and according to this we can undestand if we need to change the
                # details->(~id,name...~) on this spesific thing or not : we need to create the suspicious variable object and after create a suit license for , create D for 
                #argument or any subFunctionOurSystem according to (~details~) . recognize all the change that the argument or every thing that we details on also it 
                #subFunctionOurSystem(the function that we turn on and analyze after we revealed the parent functionOurSystem and also about it we have details) and after we 
                #recognize that this block can get change to this thing and happned chaging we need to put it in the details .
              
                
                
                # By the way we need several more functions for perform this system of dinamic argument\subfunction 

#The process of the "recognize-subFunction" for mean time tag/argument/subClass we will mark open block like function\method\system-function\system-function-functionBlock(
#despite we don't realy know how these type of function will show) . We actually will keep on these argument with (details) in argumentDetails={A:{id:1,type:ORD,globalMarkId:copy123},B{id:1...}}
#So and we will catch the index that apears first time and take the value and after if we see more times the same name in the code we decide if change the details of the same
#argument or something like this , first if the range block of the first variable according the index consider in the new variable that we found according to this tag every time 
#we open any block -> <B></B> the second we need to understand if the variable that wrote consider in the range-variable-same-page that actually mean that we will create 
#str block for every level of block i.e we have function1... function2... and both on the same level of block but they don't have the same block in eventully so we catch 
#for example all the line that with "\n(tow spaces)  " and after saperate this str that we will create with join to tow part in our cases one is the part1 with firsts <B>block</B>
#and the second with <B></B> next . why we do it ? we actually will create in these way sparetion and we will know who is argument that sure not associate to our argument and
#and who is suspicious for . And after we search the range of index of this block and search in every of them the argument and things that we put details on after we have 
#the suspicious sub-function range in the exact range we can check more things we that really suit or not with the function that range of index according to part of str that
#we put of . 

#The three part of (recognize sub things for change details and etc...) is actually pull out every block and and function things and understand if exist variable\object that
#suspicious in these mini-block after we search nonlocal or global in suit case with for..in and our range-index function .

#2 example with 
#More innovetive to the "tag" , we can buker thing with the tag and simply change them and modify them that mean we have actually tree condition to the "tag" one is in 
# the argument tow is just the tag and id and thing that we want in like example one and tow in suit and the three is actually can be the same with example 2 or something

#3 like this :idArgument?("Elior")!(function(idArgument)~(idT?("Banda")~containT("Elior The King")!(123))

#let's break every example down : 
# 1: we chack the argument say if direct ([0]) "after" (->) the  (idArgument) that     detemined ("it's (~) mean "and")
f
